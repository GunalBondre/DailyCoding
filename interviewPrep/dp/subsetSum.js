const subset = (arr, sum, n) => {
	if (sum == 0) return true;
	if (n == 0) return false;

	let dp = new Array(n + 1)
		.fill(true)
		.map(() => new Array(sum + 1).fill(false));

	if (dp[n][sum]) {
		return dp[n][sum];
	}
	if (arr[n - 1] > sum) {
		return (dp[n][sum] = subset(arr, sum, n - 1));
	}

	return (dp[n][sum] =
		subset(arr, sum - arr[n - 1], n - 1) || subset(arr, sum, n - 1));
};

const canPartition = (arr) => {
	let n = arr.length;
	let sum = 0;
	for (let i in arr) {
		sum += arr[i];
	}

	if (sum % 2 !== 0) {
		return false;
	} else if (sum % 2 == 0) {
		return subset(arr, sum / 2, n);
	}
};
// console.log(subset([3, 34, 4, 12, 5, 2], 9, 6));
console.log(
	canPartition([
		100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
		100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
		100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
		100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
		100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
		100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
		100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
		100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
		100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
		100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
		100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
		100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
		100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
		100, 100, 100, 99, 97,
	])
);
